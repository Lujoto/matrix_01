     1                                   ; move.asm
     2                                  %include "_pr.inc"
     3                              <1> ; I guess I can reserve memory in the .inc files
     4                              <1> section .bss
     5 00000000 <res 64h>           <1>     digitSpace resb 100
     6 00000064 ????????????????    <1>     digitSpacePos resb 8
     7 0000006C ????????????????    <1>     printSpace resb 8
     8                              <1> 
     9                              <1> ; exit
    10                              <1> %macro exit 0
    11                              <1>     mov rax, 60
    12                              <1>     mov rdi, 0
    13                              <1>     syscall
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> ;print
    17                              <1> %macro _print 1
    18                              <1>     mov rax, %1                 ; rax 0xnothing -> 0x40402a %1
    19                              <1>     mov [printSpace], rax       ; print space holds the 3 byte address of rax
    20                              <1>     mov rbx, 0                  ; set rbx to 0 to stop the loop
    21                              <1> %%_printloop:
    22                              <1>     mov cl, [rax]               ; move contents of rax to the lower byte of rcx
    23                              <1>     cmp cl, 0                   ; compare that byte with 0
    24                              <1>     je %%endPrintLoop
    25                              <1>     inc rbx                     ;using rbx as our char count
    26                              <1>     inc rax                     ;rax points to next character.   
    27                              <1>     jmp %%_printloop
    28                              <1> %%endPrintLoop:
    29                              <1>     mov rax, 1
    30                              <1>     mov rdi, 1
    31                              <1>     mov rsi, [printSpace]
    32                              <1>     mov rdx, rbx
    33                              <1>     syscall
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> ;print1
     3                                  
     4                                  section .data
     5 00000000 7B                          bNum db 123
     6 00000001 3930                        wNum dw 12345
     7 00000003 D2029649                    dNum dd 1234567890
     8 00000007 1581E97DF4102211            qNum1 dq 1234567890123456789
     9 0000000F 40E2010000000000            qNum2 dq 123456
    10 00000017 1F85EB51B81E0940            qNum3 dq 3.14
    11                                  
    12                                  section .bss
    13                                  
    14 00000074 <res 40h>               rash resb 64
    15                                  
    16                                  section .text
    17                                      global main
    18                                  main:
    19                                  
    20 00000000 55                      push   rbp
    21 00000001 4889E5                  mov    rbp, rsp ; these two steps happen prior to the breakpoint in main for some reason
    22                                  
    23                                  
    24 00000004 48C7C0FFFFFFFF          mov rax, -1     ; fill rax with 1s
    25 0000000B 48890425[74000000]      mov [rash], rax
    26 00000013 48B9-                   mov rcx, rash
    26 00000015 [7400000000000000] 
    27                                  
    28 0000001D 8A0425[00000000]        mov al, byte [bNum]
    29 00000024 48890425[74000000]      mov [rash], rax
    30 0000002C 48B9-                   mov rcx, rash 
    30 0000002E [7400000000000000] 
    31                                  
    32 00000036 4831C0                  xor rax, rax
    33 00000039 8A0425[00000000]        mov al, byte [bNum]
    34                                  
    35 00000040 48C7C0FFFFFFFF          mov rax, -1
    36 00000047 8B0425[03000000]        mov eax, dword [dNum]
    37 0000004E 4831C9                  xor rcx, rcx
    38 00000051 48890425[74000000]      mov [rash], rax
    39 00000059 48B9-                   mov rcx, rash
    39 0000005B [7400000000000000] 
    40                                  
    41                                  exit
    11 00000063 B83C000000          <1>  mov rax, 60
    12 00000068 BF00000000          <1>  mov rdi, 0
    13 0000006D 0F05                <1>  syscall
    42                                  
